enter number of steps:
 Nat: thanks!
nSteps (number of decision steps):
  9
crE (crit. cumulated emissions threshold):
  4
crN (crit. number of decision steps):
  2
pS1 (prob. of staying in a good world, cumulated emissions below crE):
  1
pS2 (prob. of staying in a good world, cumulated emissions above crE):
  0
pA1 (prob. of eff. tech. becoming available, number of steps below crN):
  0
pA2 (prob. of eff. tech. becoming available, number of steps above crN):
  1
pLL (prob. of low emission policies, emissions low, low selected):
  0.7
pLH (prob. of low emission policies, emissions high, low selected):
  0.5
pHL (prob. of high emission policies, emissions low, high selected):
  0.5
pHH (prob. of high emission policies, emissions high, high selected):
  0.7
badOverGood (step benefits ratio: bad over good world):
  0.5
lowOverGoodUnavailable (benefits ratio: low emissions over step, good world, eff. tech. unavailable):
  0.1
lowOverGoodAvailable (benefits ratio: low emissions over step, good world, eff. tech. available):
  0.2
highOverGood (benefits ratio: High emissions over step, good world):
  0.3
computing constHigh policies ...
computing constHigh state-control sequences ...
pairing constHigh state-control sequences with their values ...
computing (naively) the number of constHigh state-control sequences ...
number of constHigh state-control sequences:
  512
computing (naively) the most probable constHigh state-control sequence ...
most probable constHigh state-control sequence and its probability:
  (([((0,H,U,G) ** H), ((1,H,U,G) ** H), ((2,H,U,G) ** H), ((3,H,U,G) ** H), ((4,H,A,G) ** H), ((5,H,A,G) ** H), ((6,H,A,B) ** H), ((7,H,A,B) ** H), ((8,H,A,B) ** H), ((9,H,A,B) **  )], 9.700000000000001), 0.04035360699999998)
sorting (naively) the constHigh state-control sequence ...
most probable constHigh state-control sequences (first 3) and their probabilities:
  [(([((0,H,U,G) ** H), ((1,H,U,G) ** H), ((2,H,U,G) ** H), ((3,H,U,G) ** H), ((4,H,A,G) ** H), ((5,H,A,G) ** H), ((6,H,A,B) ** H), ((7,H,A,B) ** H), ((8,H,A,B) ** H), ((9,H,A,B) **  )], 9.700000000000001), 0.04035360699999998),
   (([((0,H,U,G) ** H), ((1,H,U,G) ** H), ((2,H,U,G) ** H), ((3,H,U,G) ** H), ((4,H,A,G) ** H), ((5,H,A,G) ** H), ((6,H,A,B) ** H), ((7,H,A,B) ** H), ((8,H,A,B) ** H), ((8,L,A,B) **  )], 9.6), 0.01729440299999999),
   (([((0,H,U,G) ** H), ((1,H,U,G) ** H), ((2,H,U,G) ** H), ((3,H,U,G) ** H), ((4,H,A,G) ** H), ((5,H,A,G) ** H), ((6,H,A,B) ** H), ((7,H,A,B) ** H), ((7,L,A,B) ** H), ((8,H,A,B) **  )], 9.6), 0.012353145)]
measure of constHigh rewards:
  10.42584437019994
computing constLow policies ...
computing constLow state-control sequences ...
pairing constLow state-control sequences with their values ...
computing (naively) the number of constLow state-control sequences ...
number of constLow state-control sequences:
  512
computing (naively) the most probable constLow state-control sequence ...
most probable constLow state-control sequence and its probability:
  (([((0,H,U,G) ** L), ((0,L,U,G) ** L), ((0,L,U,G) ** L), ((0,L,U,G) ** L), ((0,L,A,G) ** L), ((0,L,A,G) ** L), ((0,L,A,G) ** L), ((0,L,A,G) ** L), ((0,L,A,G) ** L), ((0,L,A,G) **  )], 10.5), 0.02882400499999999)
sorting (naively) the constLow state-control sequence ...
most probable constLow state-control sequences (first 3) and their probabilities:
  [(([((0,H,U,G) ** L), ((0,L,U,G) ** L), ((0,L,U,G) ** L), ((0,L,U,G) ** L), ((0,L,A,G) ** L), ((0,L,A,G) ** L), ((0,L,A,G) ** L), ((0,L,A,G) ** L), ((0,L,A,G) ** L), ((0,L,A,G) **  )], 10.5), 0.02882400499999999),
   (([((0,H,U,G) ** L), ((1,H,U,G) ** L), ((1,L,U,G) ** L), ((1,L,U,G) ** L), ((1,L,A,G) ** L), ((1,L,A,G) ** L), ((1,L,A,G) ** L), ((1,L,A,G) ** L), ((1,L,A,G) ** L), ((1,L,A,G) **  )], 10.7), 0.02058857499999999),
   (([((0,H,U,G) ** L), ((1,H,U,G) ** L), ((2,H,U,G) ** L), ((2,L,U,G) ** L), ((2,L,A,G) ** L), ((2,L,A,G) ** L), ((2,L,A,G) ** L), ((2,L,A,G) ** L), ((2,L,A,G) ** L), ((2,L,A,G) **  )], 10.9), 0.01470612499999999)]
measure of constLow rewards:
  10.75198436699997
computing optimal policies ...
computing possible state-control sequences ...
pairing possible state-control sequences with their values ...
computing (naively) the number of possible state-control sequences ...
number of possible state-control sequences:
  512
computing (naively) the most probable state-control sequence ...
most probable state-control sequence and its probability:
  (([((0,H,U,G) ** L), ((1,H,U,G) ** L), ((2,H,U,G) ** L), ((2,L,U,G) ** L), ((2,L,A,G) ** L), ((2,L,A,G) ** L), ((2,L,A,G) ** H), ((3,H,A,G) ** H), ((4,H,A,G) ** H), ((5,H,A,G) **  )], 11.2), 0.010504375)
sorting (naively) the possible state-control sequence ...
most probable state-control sequences (first 3) and their probabilities:
  [(([((0,H,U,G) ** L), ((1,H,U,G) ** L), ((2,H,U,G) ** L), ((2,L,U,G) ** L), ((2,L,A,G) ** L), ((2,L,A,G) ** L), ((2,L,A,G) ** H), ((3,H,A,G) ** H), ((4,H,A,G) ** H), ((5,H,A,G) **  )], 11.2), 0.010504375),
   (([((0,H,U,G) ** L), ((1,H,U,G) ** L), ((1,L,U,G) ** L), ((1,L,U,G) ** L), ((1,L,A,G) ** H), ((1,L,A,G) ** H), ((2,H,A,G) ** H), ((3,H,A,G) ** H), ((4,H,A,G) ** H), ((5,H,A,G) **  )], 11.1), 0.010504375),
   (([((0,H,U,G) ** L), ((1,H,U,G) ** L), ((2,H,U,G) ** L), ((3,H,U,G) ** L), ((4,H,A,G) ** L), ((5,H,A,G) ** H), ((6,H,A,B) ** H), ((7,H,A,B) ** H), ((8,H,A,B) ** H), ((9,H,A,B) **  )], 9.700000000000001), 0.007503124999999998)]
measure of possible rewards:
  10.83211812500003
done!
